{"version":3,"sources":["logo.svg","components/ToDoList/CreateToDoForm/CreateTodoForm.js","components/ToDoList/TasksList/TasksListItem.js","components/ToDoList/TasksList/TasksList.js","components/ToDoList/ToDoList/ToDoList.js","components/Firebase/base.js","components/Security/AuthProvader/AuthProvader.js","components/Pages/Home/Home.js","components/Pages/Login/Login.js","components/Pages/SignUp/SignUp.js","components/Pages/Footer/Footer.js","components/Pages/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateTodoForm","props","useState","name","setName","className","onSubmit","event","preventDefault","toDo","id","Math","random","user","email","date","Date","getTime","isDone","onCreateToDo","value","onChange","e","target","type","placeholder","TasksListItem","setToDo","editToDo","setEditToDo","checked","onClick","onUpdateToDo","onDeleteToDo","TasksList","toDos","map","el","key","ToDoList","setToDos","currentUser","updateToDos","newToDos","filter","app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","AuthProvider","children","setCurrentUser","useEffect","auth","onAuthStateChanged","Provider","Home","useContext","toLocaleDateString","to","withRouter","history","handleLogin","useCallback","a","elements","password","signInWithEmailAndPassword","push","alert","handleSignUp","createUserWithEmailAndPassword","Footer","getFullYear","href","handleLogout","signOut","src","Logo","alt","location","pathname","App","exact","path","component","Login","SignUp","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddfe3ec2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\r\n\r\nfunction CreateTodoForm(props) {\r\n    const [name, setName] = useState('');\r\n\r\n    const onCreateToDo = (event) => {\r\n        event.preventDefault();\r\n        const toDo = {id: Math.random(), user: props.user.email, date: new Date().getTime(), name: name, isDone: false};\r\n        props.onCreateToDo(toDo);\r\n        setName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"todo-form\" onSubmit={onCreateToDo}>\r\n                <div>\r\n                    <input value={name}\r\n                           onChange={(e) => setName(e.target.value)}\r\n                           type=\"text\" placeholder=\"What do you need to do?\" />\r\n                    <button type=\"submit\">Add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateTodoForm;","import React, {useState} from 'react';\r\n\r\nfunction TasksListItem(props) {\r\n\r\n    const [toDo, setToDo] = useState(props.toDo);\r\n    const [editToDo, setEditToDo] = useState({});\r\n\r\n    const editMode = () => {\r\n        setEditToDo(toDo);\r\n    }\r\n\r\n    const onUpdateToDo = () => {\r\n        props.onUpdateToDo(toDo);\r\n        setEditToDo({});\r\n    }\r\n\r\n    const onDeleteToDo = () => {\r\n        props.onDeleteToDo(toDo);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <div className=\"list-item\">\r\n                <input type=\"checkbox\" className=\"chk-li\"\r\n                       value={toDo.isDone}\r\n                       onChange={(e) => setToDo({...toDo, isDone: e.target.checked})}\r\n                />\r\n                {\r\n                    editToDo.id ?\r\n                        <>\r\n                            <input className=\"edt-input\" type=\"text\"\r\n                                   value={toDo.name}\r\n                                   onChange={(e) => setToDo({...toDo, name: e.target.value})}\r\n                            />\r\n                            <button className=\"edt-btn\" onClick={onUpdateToDo}>Update</button>\r\n                        </>\r\n                        :\r\n                        <span className={toDo.isDone ? \"spn-li completed\" : \"spn-li\"} onClick={editMode}>\r\n                            {toDo.name}\r\n                        </span>\r\n                }\r\n                <i className=\"dlt-li\" onClick={onDeleteToDo}>X</i>\r\n            </div>\r\n\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default TasksListItem;","import React from 'react';\r\nimport TasksListItem from \"./TasksListItem\";\r\n\r\nfunction TasksList(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <ul>\r\n                {props.toDos.map(el =>\r\n                    <TasksListItem key={el.id}\r\n                                   toDo={el}\r\n                                   onUpdateToDo={props.onUpdateToDo}\r\n                                   onDeleteToDo={props.onDeleteToDo}\r\n                    />\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TasksList;","import React, {useState} from 'react';\r\nimport CreateTodoForm from \"../CreateToDoForm/CreateTodoForm\";\r\nimport TasksList from \"../TasksList/TasksList\";\r\n\r\nfunction ToDoList(props) {\r\n\r\n    const [toDos, setToDos] = useState([]);\r\n\r\n    const onCreateToDo = (toDo) => {\r\n        setToDos([...toDos, toDo]);\r\n    }\r\n\r\n    const onUpdateToDo = (toDo) => {\r\n        const updateToDos = toDos.map(el => {\r\n            if( el.id === toDo.id){\r\n                return {...el, toDo}\r\n            } else {\r\n                return el;\r\n            }\r\n        });\r\n        setToDos(updateToDos);\r\n    }\r\n\r\n    const onDeleteToDo = (toDo) => {\r\n        const newToDos = toDos.filter(el => el.id !== toDo.id);\r\n        setToDos(newToDos);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CreateTodoForm onCreateToDo={onCreateToDo} user={props.currentUser}/>\r\n            <TasksList toDos={toDos}\r\n                       onUpdateToDo={onUpdateToDo}\r\n                       onDeleteToDo={onDeleteToDo}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n});\r\n\r\nexport default app;","import React, { useEffect, useState } from \"react\";\r\nimport app from \"../../Firebase/base\";\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nfunction AuthProvider({children}) {\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n\r\n    useEffect(() => {\r\n        app.auth().onAuthStateChanged(setCurrentUser);\r\n    }, []);\r\n\r\n    return(\r\n        <AuthContext.Provider value={currentUser}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport {AuthProvider, AuthContext};","import React, {useContext} from 'react';\nimport ToDoList from \"../../ToDoList/ToDoList/ToDoList\";\nimport {AuthContext} from \"../../Security/AuthProvader/AuthProvader\";\nimport {Link} from \"react-router-dom\";\n\nfunction Home() {\n\n    const currentUser = useContext(AuthContext);\n\n    return (\n        <div className=\"row\">\n            <div className=\"column side\">\n                <h2>Date:</h2>\n                <p>Under construction...</p>\n            </div>\n            <div className=\"column middle\">\n                <h2>Today is {new Date().toLocaleDateString()}</h2>\n                {\n                    currentUser ?\n                        <ToDoList currentUser={currentUser}/>\n                        :\n                        <p>\n                            For working with to do list\n                            please <Link to=\"/login\">login</Link> or <Link to=\"/signup\">register</Link>.\n                        </p>\n                }\n            </div>\n            <div className=\"column side\">\n                <p>Here can be your advertisement</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n","import React, { useCallback, useContext } from 'react';\nimport { Redirect, withRouter } from \"react-router\";\nimport app from \"../../Firebase/base\";\nimport { AuthContext } from \"../../Security/AuthProvader/AuthProvader\";\n\nfunction Login({history}) {\n    //Hook useCallback for memoized data. Like as useMemo().\n    // The Async keyword means what we will be use synchronization as in Java language. Bellow we use await keyword with this async.\n    const handleLogin = useCallback( async event =>{\n        //This method preventDefault doesn't let to reload a page after submitting\n        event.preventDefault();\n\n        //Initialize our input fields\n        const {email, password} = event.target.elements;\n\n        try{\n            //Log in to system with a signInWithEmailAndPassword method from the firebase API.\n            //The await keyword means what we will be waiting finish this process.\n            // And another AUTH process can't be start same process in this time\n            await app\n                .auth()\n                .signInWithEmailAndPassword(email.value, password.value);\n\n            //Make a redirect to the home page after successfully log in\n            history.push(\"/\");\n        } catch (error){\n            alert(error);\n        }\n    }, [history]);\n\n    //Take an user from AuthContext and check it. If it available, then make a redirect to home page.\n    const currentUser = useContext(AuthContext);\n    if(currentUser) {\n        return <Redirect to=\"\" />;\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"container\">\n                <form onSubmit={handleLogin}>\n                    <fieldset>\n                        <legend>Log in</legend>\n                        <div>\n                            <label>Email</label>\n                            <input name=\"email\" type=\"email\" placeholder=\"Email\" />\n                        </div>\n                        <div>\n                            <label>Password</label>\n                            <input name=\"password\" type=\"password\" placeholder=\"Password\" />\n                        </div>\n                        <div className=\"clearfix\">\n                            <button type=\"submit\">Log In</button>\n                        </div>\n                    </fieldset>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Login);","import React, {useCallback} from 'react';\nimport { withRouter } from \"react-router\";\nimport app from \"../../Firebase/base\";\n\nfunction SignUp({history}) {\n    //Hook useCallback for memoized data. Like as useMemo().\n    // The Async keyword means what we will be use synchronization as in Java language. Bellow we use await keyword with this async.\n    const handleSignUp = useCallback(async event => {\n\n        //This method preventDefault doesn't let to reload a page after submitting\n        event.preventDefault();\n\n        //Initialize our input fields\n        const {email, password} = event.target.elements;\n\n        try{\n\n            //Create an user with a createUserWithEmailAndPassword method from the firebase API.\n            //The await keyword means what we will be waiting finish this process.\n            // And another AUTH process can't be start same process in this time\n            await app\n                .auth()\n                .createUserWithEmailAndPassword(email.value, password.value);\n\n            //Make a redirect to the home page after successfully sign up\n            history.push(\"/\");\n\n        } catch(error){\n            //show errors\n            alert(error);\n        }\n    }, [history]);\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={handleSignUp}>\n                <fieldset>\n                    <legend>Sign Up</legend>\n                    <p>Please fill in this form to create an account.</p>\n                    <div>\n                        <label>Email</label>\n                        <input name=\"email\" type=\"email\" placeholder=\"Email\"/>\n                    </div>\n                    <div>\n                        <label>Password</label>\n                        <input name=\"password\" type=\"password\" placeholder=\"Password\"/>\n                    </div>\n                    <div className=\"clearfix\">\n                        <button type=\"submit\">Sign Up</button>\n                    </div>\n                </fieldset>\n            </form>\n        </div>\n    );\n}\n\nexport default withRouter(SignUp);","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return (\r\n        <div className=\"footer\">\r\n            <p className=\"copyright\">\r\n                Copyright © {new Date().getFullYear()} &nbsp;\r\n                <a href=\"https://github.com/kano-kenji/todo-list-auth\">Alexander Tarasevich</a>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { useCallback, useContext } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport Logo from \"../../../logo.svg\";\r\nimport {AuthContext} from \"../../Security/AuthProvader/AuthProvader\";\r\nimport {Link} from \"react-router-dom\";\r\nimport app from \"../../Firebase/base\";\r\n\r\nfunction Header({history}) {\r\n\r\n    const currentUser = useContext(AuthContext);\r\n\r\n    const handleLogout = useCallback(async event => {\r\n        await app\r\n            .auth()\r\n            .signOut();\r\n        history.push(\"/\");\r\n    }, [history]);\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"logo\">\r\n                <img src={Logo} alt=\"ReactJS/Redux\" />\r\n                <h1><Link to=\"/\">ToDo List</Link></h1>\r\n                <p>To do List for everyday</p>\r\n            </div>\r\n            <div className=\"topnav\">\r\n                {\r\n                    currentUser ?\r\n                        <>\r\n                            <Link className='menu-item' onClick={handleLogout} to=\"/\">Sign Out</Link>\r\n                            <span>{currentUser.email}</span>\r\n                        </>\r\n                        :\r\n                        (\r\n                            history.location.pathname === \"/login\" ?\r\n                                <Link className='menu-item' to=\"/signup\">Sign Up</Link>\r\n                                :\r\n                                <Link className='menu-item' to=\"/login\">Log In</Link>\r\n                        )\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Header);","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Pages/Home/Home\";\nimport Login from \"./components/Pages/Login/Login\";\nimport SignUp from \"./components/Pages/SignUp/SignUp\";\nimport { AuthProvider } from \"./components/Security/AuthProvader/AuthProvader\";\nimport PrivateRoute from \"./components/Security/PrivateRoute/PrivateRoute\";\nimport Footer from \"./components/Pages/Footer/Footer\";\nimport Header from \"./components/Pages/Header/Header\";\n\nfunction App() {\n    return (\n        <AuthProvider>\n            <Router>\n                <Header />\n                {/*<PrivateRoute exact path=\"/\" component={Home} />*/}\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/signup\" component={SignUp} />\n                <Footer />\n            </Router>\n        </AuthProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}